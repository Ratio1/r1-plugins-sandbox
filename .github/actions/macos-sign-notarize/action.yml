name: "macOS Build, Sign & Notarize (CLI + .app)"
description: "Builds darwin binaries (amd64/arm64), codesigns, notarizes, creates a universal .app, staples, and zips artifacts into dist/"
author: "Ratio1"

inputs:
    signing-identity:
        description: "Developer ID Application: â€¦"
        required: true
    certificate:
        description: "Base64-encoded .p12 certificate"
        required: true
    certificate-password:
        description: "Password for the .p12"
        required: true
    keychain-password:
        description: "Temporary keychain password"
        required: true
    ac-api-key-id:
        description: "App Store Connect API key id"
        required: true
    ac-api-issuer-id:
        description: "App Store Connect issuer id"
        required: true
    ac-api-key:
        description: "Base64-encoded AuthKey.p8 contents"
        required: true
    bundle-id:
        description: "Base bundle identifier for CLI and .app"
        required: true
    version:
        description: "Release version string"
        required: true

runs:
    using: "composite"
    steps:
        - name: Set up Go
          uses: actions/setup-go@v4
          with:
              go-version: "1.21"

        - name: Prepare keychain & import certificate
          shell: bash
          run: |
              set -euo pipefail
              CERT_PATH="${RUNNER_TEMP}/certificate.p12"
              echo "${{ inputs.certificate }}" | base64 --decode > "${CERT_PATH}"

              KEYCHAIN_PATH="${RUNNER_TEMP}/build.keychain-db"
              security create-keychain -p "${{ inputs.keychain-password }}" "${KEYCHAIN_PATH}"
              security set-keychain-settings -lut 21600 "${KEYCHAIN_PATH}"
              security unlock-keychain -p "${{ inputs.keychain-password }}" "${KEYCHAIN_PATH}"
              security import "${CERT_PATH}" -k "${KEYCHAIN_PATH}" -P "${{ inputs.certificate-password }}" -T /usr/bin/codesign -T /usr/bin/security
              existing_keychains=$(security list-keychains -d user | tr -d '"')
              security list-keychains -d user -s "${KEYCHAIN_PATH}" ${existing_keychains}
              security default-keychain -d user -s "${KEYCHAIN_PATH}"
              security set-key-partition-list -S apple-tool:,apple: -s -k "${{ inputs.keychain-password }}" "${KEYCHAIN_PATH}"
              echo "SIGNING_KEYCHAIN=${KEYCHAIN_PATH}" >> "$GITHUB_ENV"

        - name: Prepare notarization key
          shell: bash
          run: |
              set -euo pipefail
              API_KEY_PATH="${RUNNER_TEMP}/AuthKey.p8"
              echo "${{ inputs.ac-api-key }}" | base64 --decode > "${API_KEY_PATH}"
              echo "AC_API_KEY_PATH=${API_KEY_PATH}" >> "$GITHUB_ENV"

        - name: Build darwin binaries (amd64 & arm64)
          shell: bash
          env:
              CODESIGN_ALLOCATE: /usr/bin/codesign_allocate
          run: |
              set -euo pipefail
              rm -rf dist
              mkdir -p dist

              for GOARCH in amd64 arm64; do
                build_dir="${RUNNER_TEMP}/mac_${GOARCH}"
                mkdir -p "${build_dir}"
                bin="${build_dir}/r1-plugins-sandbox"

                echo "Building CLI for darwin/${GOARCH}"
                GOOS=darwin GOARCH="${GOARCH}" CGO_ENABLED=0 \
                  go build -ldflags="-s -w" -o "${bin}"

                echo "Codesigning CLI for ${GOARCH}"
                codesign --force --options runtime --timestamp \
                  --sign "${{ inputs.signing-identity }}" \
                  --keychain "${SIGNING_KEYCHAIN}" \
                  --identifier "${{ inputs.bundle-id }}" \
                  "${bin}"

                # Notarize the zipped CLI (per-arch)
                zip_path="${RUNNER_TEMP}/r1-plugins-sandbox_mac_${GOARCH}.zip"
                /usr/bin/zip -q "${zip_path}" -j "${bin}"
                xcrun notarytool submit "${zip_path}" \
                  --key "${AC_API_KEY_PATH}" \
                  --key-id "${{ inputs.ac-api-key-id }}" \
                  --issuer "${{ inputs.ac-api-issuer-id }}" \
                  --wait

                # Move final per-arch zip to dist
                mv "${zip_path}" "dist/r1-plugins-sandbox_mac_${GOARCH}.zip"

                # Verify signature from unzipped archive
                tmp_unzip="${RUNNER_TEMP}/verify_${GOARCH}"
                rm -rf "${tmp_unzip}"
                mkdir -p "${tmp_unzip}"
                /usr/bin/unzip -q "dist/r1-plugins-sandbox_mac_${GOARCH}.zip" -d "${tmp_unzip}"
                /usr/bin/codesign --verify --verbose=2 "${tmp_unzip}/r1-plugins-sandbox"
                rm -rf "${tmp_unzip}"
              done

        - name: Create universal .app, sign, notarize, staple
          shell: bash
          run: |
              set -euo pipefail
              app_dir="${RUNNER_TEMP}/r1-plugins-sandbox.app"
              rm -rf "${app_dir}"
              mkdir -p "${app_dir}/Contents/MacOS" "${app_dir}/Contents/Resources"

              # Lipo universal from already built per-arch
              universal_bin="${app_dir}/Contents/Resources/r1-plugins-sandbox"
              lipo -create \
                "${RUNNER_TEMP}/mac_amd64/r1-plugins-sandbox" \
                "${RUNNER_TEMP}/mac_arm64/r1-plugins-sandbox" \
                -output "${universal_bin}"
              chmod +x "${universal_bin}"

              # Info.plist from repo
              cp packaging/macos/Info.plist "${app_dir}/Contents/Info.plist"
              /usr/bin/plutil -replace CFBundleIdentifier -string "${{ inputs.bundle-id }}.app" "${app_dir}/Contents/Info.plist"
              /usr/bin/plutil -replace CFBundleShortVersionString -string "${{ inputs.version }}" "${app_dir}/Contents/Info.plist"
              /usr/bin/plutil -replace CFBundleVersion -string "${{ inputs.version }}" "${app_dir}/Contents/Info.plist"

              # Launcher
              launcher_path="${app_dir}/Contents/MacOS/launcher"
              install -m 0755 packaging/macos/launcher.sh "${launcher_path}"

              # Sign binary and app (deep)
              codesign --force --options runtime --timestamp \
                --sign "${{ inputs.signing-identity }}" \
                --keychain "${SIGNING_KEYCHAIN}" \
                --identifier "${{ inputs.bundle-id }}" \
                "${universal_bin}"

              codesign --force --options runtime --timestamp --deep \
                --sign "${{ inputs.signing-identity }}" \
                --keychain "${SIGNING_KEYCHAIN}" \
                --identifier "${{ inputs.bundle-id }}.app" \
                "${app_dir}"

              # Notarize .app (zip with keepParent)
              app_submission_zip="${RUNNER_TEMP}/r1-plugins-sandbox.app.zip"
              /usr/bin/ditto -c -k --keepParent "${app_dir}" "${app_submission_zip}"

              xcrun notarytool submit "${app_submission_zip}" \
                --key "${AC_API_KEY_PATH}" \
                --key-id "${{ inputs.ac-api-key-id }}" \
                --issuer "${{ inputs.ac-api-issuer-id }}" \
                --wait

              xcrun stapler staple "${app_dir}"

              final_app_zip="dist/r1-plugins-sandbox-macos.app.zip"
              /usr/bin/ditto -c -k --keepParent "${app_dir}" "${final_app_zip}"

        - name: List produced files
          shell: bash
          run: ls -lah dist

name: Release

on:
  push:
    branches:
      - main
      - test-mac-sign

permissions:
  contents: write

jobs:
  calculate-version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Semantic Version
        id: version
        uses: PaulHatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(feat|feature)"
          version_format: "${major}.${minor}.${patch}"

  build:
    name: Build Artifacts
    runs-on: ${{ matrix.os }}
    needs: calculate-version
    env:
      RELEASE_VERSION: ${{ needs.calculate-version.outputs.version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Non-macOS targets
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: ubuntu-latest
            goos: windows
            goarch: amd64
          # macOS (build + sign + notarize + app)
          - os: macos-latest
            mac: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        if: ${{ !matrix.mac }}
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      # Build & archive for Linux/Windows
      - name: Build (non-macOS)
        if: ${{ !matrix.mac }}
        shell: bash
        run: |
          set -euo pipefail
          dist="dist"
          rm -rf "$dist"
          mkdir -p "$dist"
          bin="r1-plugins-sandbox"
          ext=""
          archive="tar.gz"

          if [ "${{ matrix.goos }}" = "windows" ]; then
            ext=".exe"
            archive="zip"
          fi

          echo "Building ${bin}${ext} for ${{ matrix.goos }}/${{ matrix.goarch }}"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=0 \
            go build -ldflags="-s -w" -o "${bin}${ext}"

          pkg="${bin}_${{ matrix.goos }}_${{ matrix.goarch }}"
          if [ "$archive" = "zip" ]; then
            zip -q "dist/${pkg}.zip" "${bin}${ext}"
          else
            tar -czf "dist/${pkg}.tar.gz" "${bin}${ext}"
          fi
          rm -f "${bin}${ext}"

      - name: Upload artifact (non-macOS)
        if: ${{ !matrix.mac }}
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*
          if-no-files-found: error

      # macOS: composite action for build + sign + notarize + app bundle + zip
      - name: Sign & Notarize macOS (universal + per-arch)
        if: ${{ matrix.mac }}
        uses: ./.github/actions/macos-sign-notarize
        with:
          signing-identity: ${{ secrets.MAC_SIGNING_IDENTITY }}
          certificate: ${{ secrets.MAC_CERTIFICATE }}
          certificate-password: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ secrets.MAC_KEYCHAIN_PASSWORD }}
          ac-api-key-id: ${{ secrets.AC_API_KEY_ID }}
          ac-api-issuer-id: ${{ secrets.AC_API_ISSUER_ID }}
          ac-api-key: ${{ secrets.AC_API_KEY }}
          bundle-id: ai.ratio1.r1-plugins-sandbox
          version: ${{ env.RELEASE_VERSION }}

      - name: Upload artifact (macOS)
        if: ${{ matrix.mac }}
        uses: actions/upload-artifact@v4
        with:
          name: macos-dist
          path: dist/*
          if-no-files-found: error

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [calculate-version, build]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.calculate-version.outputs.version_tag }}
          name: v${{ needs.calculate-version.outputs.version }}
          draft: false
          prerelease: false
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

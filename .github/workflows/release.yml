name: Release

on:
  push:
    branches:
      - main
      - test-mac-sign

permissions:
  contents: write

jobs:
  calculate-version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Semantic Version
        id: version
        uses: PaulHatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(feat|feature)"
          version_format: "${major}.${minor}.${patch}"

  build-non-darwin:
    name: Build Linux and Windows Artifacts
    runs-on: ubuntu-latest
    needs: calculate-version
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Run tests
        run: go test ./...

      - name: Build sandbox binaries
        run: |
          set -euo pipefail
          dist="dist"
          rm -rf "${dist}"
          mkdir -p "${dist}"
          platforms=(
            "linux amd64"
            "linux arm64"
            "windows amd64"
          )
          for platform in "${platforms[@]}"; do
            read -r GOOS GOARCH <<<"${platform}"
            build_dir="${dist}/${GOOS}_${GOARCH}"
            mkdir -p "${build_dir}"
            bin_name="r1-plugins-sandbox"
            ext=""
            archive_ext="tar.gz"
            if [ "${GOOS}" = "windows" ]; then
              ext=".exe"
              archive_ext="zip"
            fi
            echo "building ${bin_name}${ext} for ${GOOS}/${GOARCH}"
            GOOS="${GOOS}" GOARCH="${GOARCH}" CGO_ENABLED=0 \
              go build -ldflags="-s -w" -o "${build_dir}/${bin_name}${ext}"
            if [ "${archive_ext}" = "zip" ]; then
              (cd "${build_dir}" && zip -q "../${bin_name}_${GOOS}_${GOARCH}.zip" "${bin_name}${ext}")
            else
              (cd "${build_dir}" && tar -czf "../${bin_name}_${GOOS}_${GOARCH}.tar.gz" "${bin_name}${ext}")
            fi
            rm -rf "${build_dir}"
          done

      - name: Upload non-macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: non-darwin-dist
          path: dist/*
          if-no-files-found: error

  build-macos:
    name: Build Signed macOS Artifacts
    runs-on: macos-latest
    needs: calculate-version
    env:
      MAC_SIGNING_IDENTITY: ${{ secrets.MAC_SIGNING_IDENTITY }}
      MAC_CERTIFICATE: ${{ secrets.MAC_CERTIFICATE }}
      MAC_CERTIFICATE_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
      MAC_KEYCHAIN_PASSWORD: ${{ secrets.MAC_KEYCHAIN_PASSWORD }}
      AC_API_KEY_ID: ${{ secrets.AC_API_KEY_ID }}
      AC_API_ISSUER_ID: ${{ secrets.AC_API_ISSUER_ID }}
      AC_API_KEY: ${{ secrets.AC_API_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Verify signing secrets
        run: |
          set -euo pipefail
          missing=0
          for var in MAC_SIGNING_IDENTITY MAC_CERTIFICATE MAC_CERTIFICATE_PASSWORD MAC_KEYCHAIN_PASSWORD AC_API_KEY_ID AC_API_ISSUER_ID AC_API_KEY; do
            if [ -z "${!var}" ]; then
              echo "::error::Missing required secret: ${var}"
              missing=1
            fi
          done
          if [ "${missing}" -ne 0 ]; then
            exit 1
          fi

      - name: Import signing certificate
        run: |
          set -euo pipefail
          CERT_PATH="${RUNNER_TEMP}/certificate.p12"
          export CERT_PATH
          python3 - <<'PY'
          import base64, os, pathlib
          path = pathlib.Path(os.environ["CERT_PATH"])
          data = os.environ["MAC_CERTIFICATE"].encode()
          path.write_bytes(base64.b64decode(data))
          PY
          KEYCHAIN_PATH="${RUNNER_TEMP}/build.keychain-db"
          export KEYCHAIN_PATH
          security create-keychain -p "${MAC_KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          security set-keychain-settings -lut 21600 "${KEYCHAIN_PATH}"
          security unlock-keychain -p "${MAC_KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          security import "${CERT_PATH}" -k "${KEYCHAIN_PATH}" -P "${MAC_CERTIFICATE_PASSWORD}" -T /usr/bin/codesign -T /usr/bin/security
          existing_keychains=$(security list-keychains -d user | tr -d '"')
          security list-keychains -d user -s "${KEYCHAIN_PATH}" ${existing_keychains}
          security default-keychain -d user -s "${KEYCHAIN_PATH}"
          security set-key-partition-list -S apple-tool:,apple: -s -k "${MAC_KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          echo "SIGNING_KEYCHAIN=${KEYCHAIN_PATH}" >> "${GITHUB_ENV}"

      - name: Prepare notarization key
        run: |
          set -euo pipefail
          API_KEY_PATH="${RUNNER_TEMP}/AuthKey.p8"
          export API_KEY_PATH
          python3 - <<'PY'
          import base64, os, pathlib
          path = pathlib.Path(os.environ["API_KEY_PATH"])
          data = os.environ["AC_API_KEY"].encode()
          path.write_bytes(base64.b64decode(data))
          PY
          echo "AC_API_KEY_PATH=${API_KEY_PATH}" >> "${GITHUB_ENV}"

      - name: Build, sign, and notarize macOS binaries
        env:
          CODESIGN_ALLOCATE: /usr/bin/codesign_allocate
        run: |
          set -euo pipefail
          dist="dist"
          rm -rf "${dist}"
          mkdir -p "${dist}"
          for GOARCH in amd64 arm64; do
            build_dir="${RUNNER_TEMP}/darwin_${GOARCH}"
            mkdir -p "${build_dir}"
            bin_path="${build_dir}/r1-plugins-sandbox"
            echo "building signed binary for darwin/${GOARCH}"
            GOOS=darwin GOARCH="${GOARCH}" CGO_ENABLED=0 \
              go build -ldflags="-s -w" -o "${bin_path}"
            codesign --force --options runtime --timestamp --sign "${MAC_SIGNING_IDENTITY}" --keychain "${SIGNING_KEYCHAIN}" "${bin_path}"
            submission_zip="${RUNNER_TEMP}/r1-plugins-sandbox_darwin_${GOARCH}.zip"
            /usr/bin/zip -q "${submission_zip}" -j "${bin_path}"
            xcrun notarytool submit "${submission_zip}" \
              --key "${AC_API_KEY_PATH}" \
              --key-id "${AC_API_KEY_ID}" \
              --issuer "${AC_API_ISSUER_ID}" \
              --wait
            xcrun stapler staple "${submission_zip}"
            final_archive="${dist}/r1-plugins-sandbox_darwin_${GOARCH}.zip"
            mv "${submission_zip}" "${final_archive}"
            tmp_unzip="${RUNNER_TEMP}/verify_${GOARCH}"
            rm -rf "${tmp_unzip}"
            mkdir -p "${tmp_unzip}"
            /usr/bin/unzip -q "${final_archive}" -d "${tmp_unzip}"
            /usr/sbin/spctl --assess --type execute "${tmp_unzip}/r1-plugins-sandbox"
          done

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-dist
          path: dist/*
          if-no-files-found: error

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs:
      - calculate-version
      - build-non-darwin
      - build-macos
    steps:
      - name: Download non-macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: non-darwin-dist
          path: dist

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-dist
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.calculate-version.outputs.version_tag }}
          name: v${{ needs.calculate-version.outputs.version }}
          draft: false
          prerelease: false
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
